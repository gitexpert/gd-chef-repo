#!/bin/bash
set -o errexit -o nounset -o pipefail
#set PROTOCOL="https"
function -h {
cat <<USAGE
 USAGE: $name <marathon host:port>+
        $name install_haproxy_system <marathon host:port>+
  Generates a new configuration file for HAProxy from the specified Marathon
  servers, replaces the file in /etc/haproxy and restarts the service.
  In the second form, installs the script itself, HAProxy and a cronjob that
  once a minute pings one of the Marathon servers specified and refreshes
  HAProxy if anything has changed. The list of Marathons to ping is stored,
  one per line, in:
    $cronjob_conf_file
  The script is installed as:
    $script_path
  The cronjob is installed as:
    $cronjob
  and run as root.
USAGE
}; function --help { -h ;}
export LC_ALL=en_US.UTF-8

name=haproxy-bridge
cronjob_conf_file=/etc/"$name"/efit
cronjob=/etc/cron.d/"$name"
script_path=/opt/haproxy-bridge/"$name"
conf_file=haproxy.cfg

function main {
  config "$@"
}

function refresh_system_haproxy {
  config "$@" > /tmp/"$conf_file"
  apps "$@"

  if ! diff -q /tmp/"$conf_file" /etc/haproxy/"$conf_file" >&2
  then
    msg "Found changes. Sending reload request to HAProxy..."
    cat /tmp/"$conf_file" > /etc/haproxy/"$conf_file"
    if [[ -f /etc/init/haproxy.conf ]]
    then reload haproxy ## Upstart
    elif [[ -f /usr/lib/systemd/system/haproxy.service ]]
    then systemctl reload haproxy ## systemd
    else /etc/init.d/haproxy reload
    fi
  fi
}

function install_haproxy_system {
  os=$(lsb_release -si)
  if [[ $os == "CentOS" ]] || [[ $os == "RHEL" ]]
  then
    yum install -y haproxy
    chkconfig haproxy on
  elif [[ $os == "Ubuntu" ]] || [[ $os == "Debian" ]]
  then
    env DEBIAN_FRONTEND=noninteractive aptitude install -y haproxy
    sed -i 's/^ENABLED=0/ENABLED=1/' /etc/default/haproxy
  else
    echo "$os is not a supported OS for this feature."
    exit 1
  fi
  install_cronjob "$@"
}

function install_cronjob {
  mkdir -p "$(dirname "$cronjob_conf_file")"
  [[ -f $cronjob_conf_file ]] || touch "$cronjob_conf_file"
  if [[ $# -gt 0 ]]
  then printf '%s\n' "$@" | dd of="$cronjob_conf_file"
  fi
  cat "$0" | dd of="$script_path"
  chmod ug+rx "$script_path"
  cronjob  | dd of="$cronjob"
  header   | dd of=/etc/haproxy/"$conf_file"
}

function cronjob {
cat <<EOF
* * * * * root $script_path logged refresh_system_haproxy \$(cat $cronjob_conf_file)
* * * * * (root sleep 30 ; root $script_path logged refresh_system_haproxy \$(cat $cronjob_conf_file)
EOF
}

function config {
  header
  #apps "$@"
}

function header {
cat <<\EOF
global
    log 127.0.0.1 local0
    log 127.0.0.1 local1 notice
    #log 127.0.0.1 local1 debug
    chroot /var/lib/haproxy
    #stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

   #Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    ssl-default-bind-ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4
    #ssl-default-bind-options no-sslv3 no-tlsv10
    tune.ssl.default-dh-param 4096

defaults
  log            global
  retries             3
  mode    http
  maxconn          2000
  option  httplog
  option  dontlognull
  option  forwardfor
  timeout connect  5000
  timeout client  50000
  timeout server  50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http
  stats enable
  stats auth <%= @shipyarduser %>:<%= @shipyardpass %>
  stats uri /stats
  
frontend CapitalOne
    bind *:80
    bind *:443 ssl crt /etc/ssl/private/haproxy.pem ca-file /etc/ssl/private/rootcacert.pem verify required
    mode http
    option httplog
    #acl secure dst_port eq 443
    #redirect scheme https if !{ ssl_fc }
    #rspadd Strict-Transport-Security:\ max-age=31536000;\ includeSubDomains;\ preload
    #rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure if secure
    acl url_pivr path_beg /partnerships
    use_backend docker-pivr if url_pivr

backend docker-pivr
    balance roundrobin
    #http-request set-header X-Forwarded-Port %[dst_port]
    #http-request add-header X-Forwarded-Proto https if { ssl_fc }
    option tcp-check
    server web-1 10.205.73.172:11720 check port 11720
    server web-2 10.205.81.161:11720 check port 11720
    mode http

    option httplog

 listen stats
    bind *:<%= @haproxy_listenport %>
    balance
    mode http
    stats enable
    stats uri /stats
    stats realm Haproxy\ Statistics
    stats auth <%= @shipyarduser %>:<%= @shipyardpass %>
  
EOF
}


function apps {

  # Only 3rd entry will be used for frontend and backend configuration
  count=1
  (until curl --user <%= @shipyarduser %>:<%= @shipyardpass %> -sSfLk -m 10 -H 'Accept: text/plain' "${1%/}"/v2/tasks; do [ $# -lt 2 ] && return 1 || shift; done) | while read -r txt
  do
    set -- $txt
    if [ $# -lt 2 ]; then
      shift $#
      continue
    fi

    local app_name="$1"
    local app_port="$2"
    shift 2
    if [ -n "`echo ${app_name}|grep "cname"`" ] && [ ${count} -eq 3 ]; then
  count=1
  #cname_val=`echo ${app_name}|cut -d "-" -f1`
  #cname_val=`echo "${app_name}"|awk -F "-" 'BEGIN {OFS="-"}{$NF=$(NF-1)=""; print }'|sed 's/..$//'`
  cname_val=`echo "${app_name}"|awk -F "-" '{ print $NF }'`
  sed -i "s/# Define hosts/# Define hosts\n\tacl host_${app_name} hdr(host) -i ${cname_val} \n\tuse_backend ${app_name}_cluster if host_${app_name}/g" /tmp/$conf_file
  echo "
backend ${app_name}_cluster
  balance leastconn
  mode tcp
  option httpclose
  option forwardfor
  cookie JSESSIONID prefix " >> /tmp/$conf_file

  while [[ $# -ne 0 ]]
        do
          echo "  server ${app_name}-$# $1 check" >> /tmp/$conf_file
          shift
        done
    elif [ -n "`echo ${app_name}|grep "cname"`" ] && [ ! -z "${app_port##*[!0-9]*}" ]; then
        count=$((count + 1))
        echo "
listen $app_name-$app_port
  bind 0.0.0.0:$app_port
  mode tcp
  option tcplog
  balance leastconn
" >> /tmp/$conf_file
      while [[ $# -ne 0 ]]
      do
        echo "  server ${app_name}-$# $1 check" >> /tmp/$conf_file
        shift
      done
    elif [ ! -z "${app_port##*[!0-9]*}" ]; then
          echo "
listen $app_name-$app_port
  bind 0.0.0.0:$app_port
  mode tcp
  option tcplog
  balance leastconn
" >> /tmp/$conf_file
      while [[ $# -ne 0 ]]
      do
        echo "  server ${app_name}-$# $1 check" >> /tmp/$conf_file
        shift
      done
    fi
  done
}

function logged {
  exec 1> >(logger -p user.info -t "$name[$$]")
  exec 2> >(logger -p user.notice -t "$name[$$]")
  "$@"
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

# If less than 1 argument is provided, print usage and exit. At least one
# argument is required as described in the `USAGE` message.
[ $# -lt 1 ] && { -h; exit 1; }

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then "$@"
else main "$@"
fi
